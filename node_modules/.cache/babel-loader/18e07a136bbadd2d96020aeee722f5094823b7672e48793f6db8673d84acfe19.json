{"ast":null,"code":"var arrayFilter = require('./_arrayFilter'),\n  arrayMap = require('./_arrayMap'),\n  baseProperty = require('./_baseProperty'),\n  baseTimes = require('./_baseTimes'),\n  isArrayLikeObject = require('./isArrayLikeObject');\n\n/* Built-in method references for those with the same name as other `lodash` methods. */\nvar nativeMax = Math.max;\n\n/**\n * This method is like `_.zip` except that it accepts an array of grouped\n * elements and creates an array regrouping the elements to their pre-zip\n * configuration.\n *\n * @static\n * @memberOf _\n * @since 1.2.0\n * @category Array\n * @param {Array} array The array of grouped elements to process.\n * @returns {Array} Returns the new array of regrouped elements.\n * @example\n *\n * var zipped = _.zip(['a', 'b'], [1, 2], [true, false]);\n * // => [['a', 1, true], ['b', 2, false]]\n *\n * _.unzip(zipped);\n * // => [['a', 'b'], [1, 2], [true, false]]\n */\nfunction unzip(array) {\n  if (!(array && array.length)) {\n    return [];\n  }\n  var length = 0;\n  array = arrayFilter(array, function (group) {\n    if (isArrayLikeObject(group)) {\n      length = nativeMax(group.length, length);\n      return true;\n    }\n  });\n  return baseTimes(length, function (index) {\n    return arrayMap(array, baseProperty(index));\n  });\n}\nmodule.exports = unzip;","map":{"version":3,"names":["arrayFilter","require","arrayMap","baseProperty","baseTimes","isArrayLikeObject","nativeMax","Math","max","unzip","array","length","group","index","module","exports"],"sources":["C:/Users/Microsoft/OneDrive/Documents/c prgramming/.dist/react js/songProject/my-app/node_modules/lodash/unzip.js"],"sourcesContent":["var arrayFilter = require('./_arrayFilter'),\n    arrayMap = require('./_arrayMap'),\n    baseProperty = require('./_baseProperty'),\n    baseTimes = require('./_baseTimes'),\n    isArrayLikeObject = require('./isArrayLikeObject');\n\n/* Built-in method references for those with the same name as other `lodash` methods. */\nvar nativeMax = Math.max;\n\n/**\n * This method is like `_.zip` except that it accepts an array of grouped\n * elements and creates an array regrouping the elements to their pre-zip\n * configuration.\n *\n * @static\n * @memberOf _\n * @since 1.2.0\n * @category Array\n * @param {Array} array The array of grouped elements to process.\n * @returns {Array} Returns the new array of regrouped elements.\n * @example\n *\n * var zipped = _.zip(['a', 'b'], [1, 2], [true, false]);\n * // => [['a', 1, true], ['b', 2, false]]\n *\n * _.unzip(zipped);\n * // => [['a', 'b'], [1, 2], [true, false]]\n */\nfunction unzip(array) {\n  if (!(array && array.length)) {\n    return [];\n  }\n  var length = 0;\n  array = arrayFilter(array, function(group) {\n    if (isArrayLikeObject(group)) {\n      length = nativeMax(group.length, length);\n      return true;\n    }\n  });\n  return baseTimes(length, function(index) {\n    return arrayMap(array, baseProperty(index));\n  });\n}\n\nmodule.exports = unzip;\n"],"mappings":"AAAA,IAAIA,WAAW,GAAGC,OAAO,CAAC,gBAAgB,CAAC;EACvCC,QAAQ,GAAGD,OAAO,CAAC,aAAa,CAAC;EACjCE,YAAY,GAAGF,OAAO,CAAC,iBAAiB,CAAC;EACzCG,SAAS,GAAGH,OAAO,CAAC,cAAc,CAAC;EACnCI,iBAAiB,GAAGJ,OAAO,CAAC,qBAAqB,CAAC;;AAEtD;AACA,IAAIK,SAAS,GAAGC,IAAI,CAACC,GAAG;;AAExB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASC,KAAKA,CAACC,KAAK,EAAE;EACpB,IAAI,EAAEA,KAAK,IAAIA,KAAK,CAACC,MAAM,CAAC,EAAE;IAC5B,OAAO,EAAE;EACX;EACA,IAAIA,MAAM,GAAG,CAAC;EACdD,KAAK,GAAGV,WAAW,CAACU,KAAK,EAAE,UAASE,KAAK,EAAE;IACzC,IAAIP,iBAAiB,CAACO,KAAK,CAAC,EAAE;MAC5BD,MAAM,GAAGL,SAAS,CAACM,KAAK,CAACD,MAAM,EAAEA,MAAM,CAAC;MACxC,OAAO,IAAI;IACb;EACF,CAAC,CAAC;EACF,OAAOP,SAAS,CAACO,MAAM,EAAE,UAASE,KAAK,EAAE;IACvC,OAAOX,QAAQ,CAACQ,KAAK,EAAEP,YAAY,CAACU,KAAK,CAAC,CAAC;EAC7C,CAAC,CAAC;AACJ;AAEAC,MAAM,CAACC,OAAO,GAAGN,KAAK"},"metadata":{},"sourceType":"script","externalDependencies":[]}