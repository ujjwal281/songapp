{"ast":null,"code":"var parse = require('./parse'),\n  render = require('dom-serializer');\n\n/**\n * HTML Tags\n */\n\nvar tags = {\n  tag: true,\n  script: true,\n  style: true\n};\n\n/**\n * Check if the DOM element is a tag\n *\n * isTag(type) includes <script> and <style> tags\n */\n\nexports.isTag = function (type) {\n  if (type.type) type = type.type;\n  return tags[type] || false;\n};\n\n/**\n * Convert a string to camel case notation.\n * @param  {String} str String to be converted.\n * @return {String}     String in camel case notation.\n */\n\nexports.camelCase = function (str) {\n  return str.replace(/[_.-](\\w|$)/g, function (_, x) {\n    return x.toUpperCase();\n  });\n};\n\n/**\n * Convert a string from camel case to \"CSS case\", where word boundaries are\n * described by hyphens (\"-\") and all characters are lower-case.\n * @param  {String} str String to be converted.\n * @return {string}     String in \"CSS case\".\n */\nexports.cssCase = function (str) {\n  return str.replace(/[A-Z]/g, '-$&').toLowerCase();\n};\n\n/**\n * Iterate over each DOM element without creating intermediary Cheerio instances.\n *\n * This is indented for use internally to avoid otherwise unnecessary memory pressure introduced\n * by _make.\n */\n\nexports.domEach = function (cheerio, fn) {\n  var i = 0,\n    len = cheerio.length;\n  while (i < len && fn.call(cheerio, i, cheerio[i]) !== false) ++i;\n  return cheerio;\n};\n\n/**\n * Create a deep copy of the given DOM structure by first rendering it to a\n * string and then parsing the resultant markup.\n *\n * @argument {Object} dom - The htmlparser2-compliant DOM structure\n * @argument {Object} options - The parsing/rendering options\n */\nexports.cloneDom = function (dom, options) {\n  return parse(render(dom, options), options).children;\n};\n\n/*\n * A simple way to check for HTML strings or ID strings\n */\n\nvar quickExpr = /^(?:[^#<]*(<[\\w\\W]+>)[^>]*$|#([\\w\\-]*)$)/;\n\n/*\n * Check if string is HTML\n */\nexports.isHtml = function (str) {\n  // Faster than running regex, if str starts with `<` and ends with `>`, assume it's HTML\n  if (str.charAt(0) === '<' && str.charAt(str.length - 1) === '>' && str.length >= 3) return true;\n\n  // Run the regex\n  var match = quickExpr.exec(str);\n  return !!(match && match[1]);\n};","map":{"version":3,"names":["parse","require","render","tags","tag","script","style","exports","isTag","type","camelCase","str","replace","_","x","toUpperCase","cssCase","toLowerCase","domEach","cheerio","fn","i","len","length","call","cloneDom","dom","options","children","quickExpr","isHtml","charAt","match","exec"],"sources":["C:/Users/Microsoft/OneDrive/Documents/c prgramming/.dist/react js/songProject/my-app/node_modules/cheerio/lib/utils.js"],"sourcesContent":["var parse = require('./parse'),\n    render = require('dom-serializer');\n\n/**\n * HTML Tags\n */\n\nvar tags = { tag: true, script: true, style: true };\n\n/**\n * Check if the DOM element is a tag\n *\n * isTag(type) includes <script> and <style> tags\n */\n\nexports.isTag = function(type) {\n  if (type.type) type = type.type;\n  return tags[type] || false;\n};\n\n/**\n * Convert a string to camel case notation.\n * @param  {String} str String to be converted.\n * @return {String}     String in camel case notation.\n */\n\nexports.camelCase = function(str) {\n  return str.replace(/[_.-](\\w|$)/g, function(_, x) {\n    return x.toUpperCase();\n  });\n};\n\n/**\n * Convert a string from camel case to \"CSS case\", where word boundaries are\n * described by hyphens (\"-\") and all characters are lower-case.\n * @param  {String} str String to be converted.\n * @return {string}     String in \"CSS case\".\n */\nexports.cssCase = function(str) {\n  return str.replace(/[A-Z]/g, '-$&').toLowerCase();\n};\n\n/**\n * Iterate over each DOM element without creating intermediary Cheerio instances.\n *\n * This is indented for use internally to avoid otherwise unnecessary memory pressure introduced\n * by _make.\n */\n\nexports.domEach = function(cheerio, fn) {\n  var i = 0, len = cheerio.length;\n  while (i < len && fn.call(cheerio, i, cheerio[i]) !== false) ++i;\n  return cheerio;\n};\n\n/**\n * Create a deep copy of the given DOM structure by first rendering it to a\n * string and then parsing the resultant markup.\n *\n * @argument {Object} dom - The htmlparser2-compliant DOM structure\n * @argument {Object} options - The parsing/rendering options\n */\nexports.cloneDom = function(dom, options) {\n  return parse(render(dom, options), options).children;\n};\n\n/*\n * A simple way to check for HTML strings or ID strings\n */\n\nvar quickExpr = /^(?:[^#<]*(<[\\w\\W]+>)[^>]*$|#([\\w\\-]*)$)/;\n\n/*\n * Check if string is HTML\n */\nexports.isHtml = function(str) {\n  // Faster than running regex, if str starts with `<` and ends with `>`, assume it's HTML\n  if (str.charAt(0) === '<' && str.charAt(str.length - 1) === '>' && str.length >= 3) return true;\n\n  // Run the regex\n  var match = quickExpr.exec(str);\n  return !!(match && match[1]);\n};\n"],"mappings":"AAAA,IAAIA,KAAK,GAAGC,OAAO,CAAC,SAAS,CAAC;EAC1BC,MAAM,GAAGD,OAAO,CAAC,gBAAgB,CAAC;;AAEtC;AACA;AACA;;AAEA,IAAIE,IAAI,GAAG;EAAEC,GAAG,EAAE,IAAI;EAAEC,MAAM,EAAE,IAAI;EAAEC,KAAK,EAAE;AAAK,CAAC;;AAEnD;AACA;AACA;AACA;AACA;;AAEAC,OAAO,CAACC,KAAK,GAAG,UAASC,IAAI,EAAE;EAC7B,IAAIA,IAAI,CAACA,IAAI,EAAEA,IAAI,GAAGA,IAAI,CAACA,IAAI;EAC/B,OAAON,IAAI,CAACM,IAAI,CAAC,IAAI,KAAK;AAC5B,CAAC;;AAED;AACA;AACA;AACA;AACA;;AAEAF,OAAO,CAACG,SAAS,GAAG,UAASC,GAAG,EAAE;EAChC,OAAOA,GAAG,CAACC,OAAO,CAAC,cAAc,EAAE,UAASC,CAAC,EAAEC,CAAC,EAAE;IAChD,OAAOA,CAAC,CAACC,WAAW,CAAC,CAAC;EACxB,CAAC,CAAC;AACJ,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACAR,OAAO,CAACS,OAAO,GAAG,UAASL,GAAG,EAAE;EAC9B,OAAOA,GAAG,CAACC,OAAO,CAAC,QAAQ,EAAE,KAAK,CAAC,CAACK,WAAW,CAAC,CAAC;AACnD,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;;AAEAV,OAAO,CAACW,OAAO,GAAG,UAASC,OAAO,EAAEC,EAAE,EAAE;EACtC,IAAIC,CAAC,GAAG,CAAC;IAAEC,GAAG,GAAGH,OAAO,CAACI,MAAM;EAC/B,OAAOF,CAAC,GAAGC,GAAG,IAAIF,EAAE,CAACI,IAAI,CAACL,OAAO,EAAEE,CAAC,EAAEF,OAAO,CAACE,CAAC,CAAC,CAAC,KAAK,KAAK,EAAE,EAAEA,CAAC;EAChE,OAAOF,OAAO;AAChB,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACAZ,OAAO,CAACkB,QAAQ,GAAG,UAASC,GAAG,EAAEC,OAAO,EAAE;EACxC,OAAO3B,KAAK,CAACE,MAAM,CAACwB,GAAG,EAAEC,OAAO,CAAC,EAAEA,OAAO,CAAC,CAACC,QAAQ;AACtD,CAAC;;AAED;AACA;AACA;;AAEA,IAAIC,SAAS,GAAG,0CAA0C;;AAE1D;AACA;AACA;AACAtB,OAAO,CAACuB,MAAM,GAAG,UAASnB,GAAG,EAAE;EAC7B;EACA,IAAIA,GAAG,CAACoB,MAAM,CAAC,CAAC,CAAC,KAAK,GAAG,IAAIpB,GAAG,CAACoB,MAAM,CAACpB,GAAG,CAACY,MAAM,GAAG,CAAC,CAAC,KAAK,GAAG,IAAIZ,GAAG,CAACY,MAAM,IAAI,CAAC,EAAE,OAAO,IAAI;;EAE/F;EACA,IAAIS,KAAK,GAAGH,SAAS,CAACI,IAAI,CAACtB,GAAG,CAAC;EAC/B,OAAO,CAAC,EAAEqB,KAAK,IAAIA,KAAK,CAAC,CAAC,CAAC,CAAC;AAC9B,CAAC"},"metadata":{},"sourceType":"script","externalDependencies":[]}