{"ast":null,"code":"const fetch = require('node-fetch');\nconst htmlToText = require('html-to-text');\nconst encoding = require('encoding');\nconst delim1 = '</div></div></div></div><div class=\"hwc\"><div class=\"BNeawe tAd8D AP7Wnd\"><div><div class=\"BNeawe tAd8D AP7Wnd\">';\nconst delim2 = '</div></div></div></div></div><div><span class=\"hwc\"><div class=\"BNeawe uEec3 AP7Wnd\">';\nconst url = \"https://www.google.com/search?q=\";\nasync function main() {\n  let e = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : \"\";\n  let d = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : \"\";\n  let i;\n  try {\n    i = await fetch(`${url}${encodeURIComponent(d + \" \" + e)}+lyrics`);\n    i = await i.textConverted();\n    [, i] = i.split(delim1);\n    [i] = i.split(delim2);\n  } catch (m) {\n    try {\n      i = await fetch(`${url}${encodeURIComponent(d + \" \" + e)}+song+lyrics`);\n      i = await i.textConverted();\n      [, i] = i.split(delim1);\n      [i] = i.split(delim2);\n    } catch (n) {\n      try {\n        i = await fetch(`${url}${encodeURIComponent(d + \" \" + e)}+song`);\n        i = await i.textConverted();\n        [, i] = i.split(delim1);\n        [i] = i.split(delim2);\n      } catch (o) {\n        try {\n          i = await fetch(`${url}${encodeURIComponent(d + \" \" + e)}`);\n          i = await i.textConverted();\n          [, i] = i.split(delim1);\n          [i] = i.split(delim2);\n        } catch (p) {\n          i = '';\n        }\n      }\n    }\n  }\n  const ret = i.split('\\n');\n  let final = '';\n  for (let j = 0; j < ret.length; j += 1) {\n    final = `${final}${htmlToText.fromString(ret[j])}\\n`;\n  }\n  return String(encoding.convert(final)).trim();\n}\nmodule.exports = main;","map":{"version":3,"names":["fetch","require","htmlToText","encoding","delim1","delim2","url","main","e","arguments","length","undefined","d","i","encodeURIComponent","textConverted","split","m","n","o","p","ret","final","j","fromString","String","convert","trim","module","exports"],"sources":["C:/Users/Microsoft/OneDrive/Documents/c prgramming/.dist/react js/songProject/my-app/node_modules/lyrics-finder/src/index.js"],"sourcesContent":["const fetch = require('node-fetch');\nconst htmlToText = require('html-to-text');\nconst encoding = require('encoding');\nconst delim1 = '</div></div></div></div><div class=\"hwc\"><div class=\"BNeawe tAd8D AP7Wnd\"><div><div class=\"BNeawe tAd8D AP7Wnd\">';\nconst delim2 = '</div></div></div></div></div><div><span class=\"hwc\"><div class=\"BNeawe uEec3 AP7Wnd\">';\nconst url = \"https://www.google.com/search?q=\";\n\nasync function main(e=\"\", d=\"\") {\n    let i;\n    try {\n        i = await fetch(`${url}${encodeURIComponent(d + \" \" + e)}+lyrics`);\n        i = await i.textConverted();\n        [, i] = i.split(delim1);\n        [i] = i.split(delim2);\n    } catch (m) {\n        try {\n            i = await fetch(`${url}${encodeURIComponent(d + \" \" + e)}+song+lyrics`);\n            i = await i.textConverted();\n            [, i] = i.split(delim1);\n            [i] = i.split(delim2);\n        } catch (n) {\n            try {\n                i = await fetch(`${url}${encodeURIComponent(d + \" \" + e)}+song`);\n                i = await i.textConverted();\n                [, i] = i.split(delim1);\n                [i] = i.split(delim2);\n            } catch (o) {\n                try {\n                    i = await fetch(`${url}${encodeURIComponent(d + \" \" + e)}`);\n                    i = await i.textConverted();\n                    [, i] = i.split(delim1);\n                    [i] = i.split(delim2);\n                } catch (p) {\n                    i = '';\n                }\n            }\n        }\n    }\n    const ret = i.split('\\n');\n    let final = '';\n    for (let j = 0; j < ret.length; j += 1) {\n        final = `${final}${htmlToText.fromString(ret[j])}\\n`;\n    }\n    return String(encoding.convert(final)).trim();\n}\nmodule.exports = main;\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}