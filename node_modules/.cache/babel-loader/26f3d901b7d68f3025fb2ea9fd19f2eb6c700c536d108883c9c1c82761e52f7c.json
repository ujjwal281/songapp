{"ast":null,"code":"import getLength from './_getLength.js';\nimport isFunction from './isFunction.js';\nimport allKeys from './allKeys.js';\n\n// Since the regular `Object.prototype.toString` type tests don't work for\n// some types in IE 11, we use a fingerprinting heuristic instead, based\n// on the methods. It's not great, but it's the best we got.\n// The fingerprint method lists are defined below.\nexport function ie11fingerprint(methods) {\n  var length = getLength(methods);\n  return function (obj) {\n    if (obj == null) return false;\n    // `Map`, `WeakMap` and `Set` have no enumerable keys.\n    var keys = allKeys(obj);\n    if (getLength(keys)) return false;\n    for (var i = 0; i < length; i++) {\n      if (!isFunction(obj[methods[i]])) return false;\n    }\n    // If we are testing against `WeakMap`, we need to ensure that\n    // `obj` doesn't have a `forEach` method in order to distinguish\n    // it from a regular `Map`.\n    return methods !== weakMapMethods || !isFunction(obj[forEachName]);\n  };\n}\n\n// In the interest of compact minification, we write\n// each string in the fingerprints only once.\nvar forEachName = 'forEach',\n  hasName = 'has',\n  commonInit = ['clear', 'delete'],\n  mapTail = ['get', hasName, 'set'];\n\n// `Map`, `WeakMap` and `Set` each have slightly different\n// combinations of the above sublists.\nexport var mapMethods = commonInit.concat(forEachName, mapTail),\n  weakMapMethods = commonInit.concat(mapTail),\n  setMethods = ['add'].concat(commonInit, forEachName, hasName);","map":{"version":3,"names":["getLength","isFunction","allKeys","ie11fingerprint","methods","length","obj","keys","i","weakMapMethods","forEachName","hasName","commonInit","mapTail","mapMethods","concat","setMethods"],"sources":["C:/Users/Microsoft/OneDrive/Documents/c prgramming/.dist/react js/songProject/my-app/node_modules/underscore/modules/_methodFingerprint.js"],"sourcesContent":["import getLength from './_getLength.js';\nimport isFunction from './isFunction.js';\nimport allKeys from './allKeys.js';\n\n// Since the regular `Object.prototype.toString` type tests don't work for\n// some types in IE 11, we use a fingerprinting heuristic instead, based\n// on the methods. It's not great, but it's the best we got.\n// The fingerprint method lists are defined below.\nexport function ie11fingerprint(methods) {\n  var length = getLength(methods);\n  return function(obj) {\n    if (obj == null) return false;\n    // `Map`, `WeakMap` and `Set` have no enumerable keys.\n    var keys = allKeys(obj);\n    if (getLength(keys)) return false;\n    for (var i = 0; i < length; i++) {\n      if (!isFunction(obj[methods[i]])) return false;\n    }\n    // If we are testing against `WeakMap`, we need to ensure that\n    // `obj` doesn't have a `forEach` method in order to distinguish\n    // it from a regular `Map`.\n    return methods !== weakMapMethods || !isFunction(obj[forEachName]);\n  };\n}\n\n// In the interest of compact minification, we write\n// each string in the fingerprints only once.\nvar forEachName = 'forEach',\n    hasName = 'has',\n    commonInit = ['clear', 'delete'],\n    mapTail = ['get', hasName, 'set'];\n\n// `Map`, `WeakMap` and `Set` each have slightly different\n// combinations of the above sublists.\nexport var mapMethods = commonInit.concat(forEachName, mapTail),\n    weakMapMethods = commonInit.concat(mapTail),\n    setMethods = ['add'].concat(commonInit, forEachName, hasName);\n"],"mappings":"AAAA,OAAOA,SAAS,MAAM,iBAAiB;AACvC,OAAOC,UAAU,MAAM,iBAAiB;AACxC,OAAOC,OAAO,MAAM,cAAc;;AAElC;AACA;AACA;AACA;AACA,OAAO,SAASC,eAAeA,CAACC,OAAO,EAAE;EACvC,IAAIC,MAAM,GAAGL,SAAS,CAACI,OAAO,CAAC;EAC/B,OAAO,UAASE,GAAG,EAAE;IACnB,IAAIA,GAAG,IAAI,IAAI,EAAE,OAAO,KAAK;IAC7B;IACA,IAAIC,IAAI,GAAGL,OAAO,CAACI,GAAG,CAAC;IACvB,IAAIN,SAAS,CAACO,IAAI,CAAC,EAAE,OAAO,KAAK;IACjC,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGH,MAAM,EAAEG,CAAC,EAAE,EAAE;MAC/B,IAAI,CAACP,UAAU,CAACK,GAAG,CAACF,OAAO,CAACI,CAAC,CAAC,CAAC,CAAC,EAAE,OAAO,KAAK;IAChD;IACA;IACA;IACA;IACA,OAAOJ,OAAO,KAAKK,cAAc,IAAI,CAACR,UAAU,CAACK,GAAG,CAACI,WAAW,CAAC,CAAC;EACpE,CAAC;AACH;;AAEA;AACA;AACA,IAAIA,WAAW,GAAG,SAAS;EACvBC,OAAO,GAAG,KAAK;EACfC,UAAU,GAAG,CAAC,OAAO,EAAE,QAAQ,CAAC;EAChCC,OAAO,GAAG,CAAC,KAAK,EAAEF,OAAO,EAAE,KAAK,CAAC;;AAErC;AACA;AACA,OAAO,IAAIG,UAAU,GAAGF,UAAU,CAACG,MAAM,CAACL,WAAW,EAAEG,OAAO,CAAC;EAC3DJ,cAAc,GAAGG,UAAU,CAACG,MAAM,CAACF,OAAO,CAAC;EAC3CG,UAAU,GAAG,CAAC,KAAK,CAAC,CAACD,MAAM,CAACH,UAAU,EAAEF,WAAW,EAAEC,OAAO,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}