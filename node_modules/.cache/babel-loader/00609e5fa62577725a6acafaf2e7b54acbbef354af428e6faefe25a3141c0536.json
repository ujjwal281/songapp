{"ast":null,"code":"var baseToString = require('./_baseToString'),\n  castSlice = require('./_castSlice'),\n  charsEndIndex = require('./_charsEndIndex'),\n  stringToArray = require('./_stringToArray'),\n  toString = require('./toString'),\n  trimmedEndIndex = require('./_trimmedEndIndex');\n\n/**\n * Removes trailing whitespace or specified characters from `string`.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category String\n * @param {string} [string=''] The string to trim.\n * @param {string} [chars=whitespace] The characters to trim.\n * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.\n * @returns {string} Returns the trimmed string.\n * @example\n *\n * _.trimEnd('  abc  ');\n * // => '  abc'\n *\n * _.trimEnd('-_-abc-_-', '_-');\n * // => '-_-abc'\n */\nfunction trimEnd(string, chars, guard) {\n  string = toString(string);\n  if (string && (guard || chars === undefined)) {\n    return string.slice(0, trimmedEndIndex(string) + 1);\n  }\n  if (!string || !(chars = baseToString(chars))) {\n    return string;\n  }\n  var strSymbols = stringToArray(string),\n    end = charsEndIndex(strSymbols, stringToArray(chars)) + 1;\n  return castSlice(strSymbols, 0, end).join('');\n}\nmodule.exports = trimEnd;","map":{"version":3,"names":["baseToString","require","castSlice","charsEndIndex","stringToArray","toString","trimmedEndIndex","trimEnd","string","chars","guard","undefined","slice","strSymbols","end","join","module","exports"],"sources":["C:/Users/Microsoft/OneDrive/Documents/c prgramming/.dist/react js/songProject/my-app/node_modules/lodash/trimEnd.js"],"sourcesContent":["var baseToString = require('./_baseToString'),\n    castSlice = require('./_castSlice'),\n    charsEndIndex = require('./_charsEndIndex'),\n    stringToArray = require('./_stringToArray'),\n    toString = require('./toString'),\n    trimmedEndIndex = require('./_trimmedEndIndex');\n\n/**\n * Removes trailing whitespace or specified characters from `string`.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category String\n * @param {string} [string=''] The string to trim.\n * @param {string} [chars=whitespace] The characters to trim.\n * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.\n * @returns {string} Returns the trimmed string.\n * @example\n *\n * _.trimEnd('  abc  ');\n * // => '  abc'\n *\n * _.trimEnd('-_-abc-_-', '_-');\n * // => '-_-abc'\n */\nfunction trimEnd(string, chars, guard) {\n  string = toString(string);\n  if (string && (guard || chars === undefined)) {\n    return string.slice(0, trimmedEndIndex(string) + 1);\n  }\n  if (!string || !(chars = baseToString(chars))) {\n    return string;\n  }\n  var strSymbols = stringToArray(string),\n      end = charsEndIndex(strSymbols, stringToArray(chars)) + 1;\n\n  return castSlice(strSymbols, 0, end).join('');\n}\n\nmodule.exports = trimEnd;\n"],"mappings":"AAAA,IAAIA,YAAY,GAAGC,OAAO,CAAC,iBAAiB,CAAC;EACzCC,SAAS,GAAGD,OAAO,CAAC,cAAc,CAAC;EACnCE,aAAa,GAAGF,OAAO,CAAC,kBAAkB,CAAC;EAC3CG,aAAa,GAAGH,OAAO,CAAC,kBAAkB,CAAC;EAC3CI,QAAQ,GAAGJ,OAAO,CAAC,YAAY,CAAC;EAChCK,eAAe,GAAGL,OAAO,CAAC,oBAAoB,CAAC;;AAEnD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASM,OAAOA,CAACC,MAAM,EAAEC,KAAK,EAAEC,KAAK,EAAE;EACrCF,MAAM,GAAGH,QAAQ,CAACG,MAAM,CAAC;EACzB,IAAIA,MAAM,KAAKE,KAAK,IAAID,KAAK,KAAKE,SAAS,CAAC,EAAE;IAC5C,OAAOH,MAAM,CAACI,KAAK,CAAC,CAAC,EAAEN,eAAe,CAACE,MAAM,CAAC,GAAG,CAAC,CAAC;EACrD;EACA,IAAI,CAACA,MAAM,IAAI,EAAEC,KAAK,GAAGT,YAAY,CAACS,KAAK,CAAC,CAAC,EAAE;IAC7C,OAAOD,MAAM;EACf;EACA,IAAIK,UAAU,GAAGT,aAAa,CAACI,MAAM,CAAC;IAClCM,GAAG,GAAGX,aAAa,CAACU,UAAU,EAAET,aAAa,CAACK,KAAK,CAAC,CAAC,GAAG,CAAC;EAE7D,OAAOP,SAAS,CAACW,UAAU,EAAE,CAAC,EAAEC,GAAG,CAAC,CAACC,IAAI,CAAC,EAAE,CAAC;AAC/C;AAEAC,MAAM,CAACC,OAAO,GAAGV,OAAO"},"metadata":{},"sourceType":"script","externalDependencies":[]}