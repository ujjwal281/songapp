{"ast":null,"code":"/*\n  Module Dependencies\n*/\nvar htmlparser = require('htmlparser2');\n\n/*\n  Parser\n*/\nexports = module.exports = function (content, options) {\n  var dom = exports.evaluate(content, options),\n    // Generic root element\n    root = exports.evaluate('<root></root>', options)[0];\n  root.type = 'root';\n\n  // Update the dom using the root\n  exports.update(dom, root);\n  return root;\n};\nexports.evaluate = function (content, options) {\n  // options = options || $.fn.options;\n\n  var dom;\n  if (typeof content === 'string' || Buffer.isBuffer(content)) {\n    dom = htmlparser.parseDOM(content, options);\n  } else {\n    dom = content;\n  }\n  return dom;\n};\n\n/*\n  Update the dom structure, for one changed layer\n*/\nexports.update = function (arr, parent) {\n  // normalize\n  if (!Array.isArray(arr)) arr = [arr];\n\n  // Update parent\n  if (parent) {\n    parent.children = arr;\n  } else {\n    parent = null;\n  }\n\n  // Update neighbors\n  for (var i = 0; i < arr.length; i++) {\n    var node = arr[i];\n\n    // Cleanly remove existing nodes from their previous structures.\n    var oldParent = node.parent || node.root,\n      oldSiblings = oldParent && oldParent.children;\n    if (oldSiblings && oldSiblings !== arr) {\n      oldSiblings.splice(oldSiblings.indexOf(node), 1);\n      if (node.prev) {\n        node.prev.next = node.next;\n      }\n      if (node.next) {\n        node.next.prev = node.prev;\n      }\n    }\n    if (parent) {\n      node.prev = arr[i - 1] || null;\n      node.next = arr[i + 1] || null;\n    } else {\n      node.prev = node.next = null;\n    }\n    if (parent && parent.type === 'root') {\n      node.root = parent;\n      node.parent = null;\n    } else {\n      node.root = null;\n      node.parent = parent;\n    }\n  }\n  return parent;\n};\n\n// module.exports = $.extend(exports);","map":{"version":3,"names":["htmlparser","require","exports","module","content","options","dom","evaluate","root","type","update","Buffer","isBuffer","parseDOM","arr","parent","Array","isArray","children","i","length","node","oldParent","oldSiblings","splice","indexOf","prev","next"],"sources":["C:/Users/Microsoft/OneDrive/Documents/c prgramming/.dist/react js/songProject/my-app/node_modules/cheerio/lib/parse.js"],"sourcesContent":["/*\n  Module Dependencies\n*/\nvar htmlparser = require('htmlparser2');\n\n/*\n  Parser\n*/\nexports = module.exports = function(content, options) {\n  var dom = exports.evaluate(content, options),\n      // Generic root element\n      root = exports.evaluate('<root></root>', options)[0];\n\n  root.type = 'root';\n\n  // Update the dom using the root\n  exports.update(dom, root);\n\n  return root;\n};\n\nexports.evaluate = function(content, options) {\n  // options = options || $.fn.options;\n\n  var dom;\n\n  if (typeof content === 'string' || Buffer.isBuffer(content)) {\n    dom = htmlparser.parseDOM(content, options);\n  } else {\n    dom = content;\n  }\n\n  return dom;\n};\n\n/*\n  Update the dom structure, for one changed layer\n*/\nexports.update = function(arr, parent) {\n  // normalize\n  if (!Array.isArray(arr)) arr = [arr];\n\n  // Update parent\n  if (parent) {\n    parent.children = arr;\n  } else {\n    parent = null;\n  }\n\n  // Update neighbors\n  for (var i = 0; i < arr.length; i++) {\n    var node = arr[i];\n\n    // Cleanly remove existing nodes from their previous structures.\n    var oldParent = node.parent || node.root,\n        oldSiblings = oldParent && oldParent.children;\n    if (oldSiblings && oldSiblings !== arr) {\n      oldSiblings.splice(oldSiblings.indexOf(node), 1);\n      if (node.prev) {\n        node.prev.next = node.next;\n      }\n      if (node.next) {\n        node.next.prev = node.prev;\n      }\n    }\n\n    if (parent) {\n      node.prev = arr[i - 1] || null;\n      node.next = arr[i + 1] || null;\n    } else {\n      node.prev = node.next = null;\n    }\n\n    if (parent && parent.type === 'root') {\n      node.root = parent;\n      node.parent = null;\n    } else {\n      node.root = null;\n      node.parent = parent;\n    }\n  }\n\n  return parent;\n};\n\n// module.exports = $.extend(exports);\n"],"mappings":"AAAA;AACA;AACA;AACA,IAAIA,UAAU,GAAGC,OAAO,CAAC,aAAa,CAAC;;AAEvC;AACA;AACA;AACAC,OAAO,GAAGC,MAAM,CAACD,OAAO,GAAG,UAASE,OAAO,EAAEC,OAAO,EAAE;EACpD,IAAIC,GAAG,GAAGJ,OAAO,CAACK,QAAQ,CAACH,OAAO,EAAEC,OAAO,CAAC;IACxC;IACAG,IAAI,GAAGN,OAAO,CAACK,QAAQ,CAAC,eAAe,EAAEF,OAAO,CAAC,CAAC,CAAC,CAAC;EAExDG,IAAI,CAACC,IAAI,GAAG,MAAM;;EAElB;EACAP,OAAO,CAACQ,MAAM,CAACJ,GAAG,EAAEE,IAAI,CAAC;EAEzB,OAAOA,IAAI;AACb,CAAC;AAEDN,OAAO,CAACK,QAAQ,GAAG,UAASH,OAAO,EAAEC,OAAO,EAAE;EAC5C;;EAEA,IAAIC,GAAG;EAEP,IAAI,OAAOF,OAAO,KAAK,QAAQ,IAAIO,MAAM,CAACC,QAAQ,CAACR,OAAO,CAAC,EAAE;IAC3DE,GAAG,GAAGN,UAAU,CAACa,QAAQ,CAACT,OAAO,EAAEC,OAAO,CAAC;EAC7C,CAAC,MAAM;IACLC,GAAG,GAAGF,OAAO;EACf;EAEA,OAAOE,GAAG;AACZ,CAAC;;AAED;AACA;AACA;AACAJ,OAAO,CAACQ,MAAM,GAAG,UAASI,GAAG,EAAEC,MAAM,EAAE;EACrC;EACA,IAAI,CAACC,KAAK,CAACC,OAAO,CAACH,GAAG,CAAC,EAAEA,GAAG,GAAG,CAACA,GAAG,CAAC;;EAEpC;EACA,IAAIC,MAAM,EAAE;IACVA,MAAM,CAACG,QAAQ,GAAGJ,GAAG;EACvB,CAAC,MAAM;IACLC,MAAM,GAAG,IAAI;EACf;;EAEA;EACA,KAAK,IAAII,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGL,GAAG,CAACM,MAAM,EAAED,CAAC,EAAE,EAAE;IACnC,IAAIE,IAAI,GAAGP,GAAG,CAACK,CAAC,CAAC;;IAEjB;IACA,IAAIG,SAAS,GAAGD,IAAI,CAACN,MAAM,IAAIM,IAAI,CAACb,IAAI;MACpCe,WAAW,GAAGD,SAAS,IAAIA,SAAS,CAACJ,QAAQ;IACjD,IAAIK,WAAW,IAAIA,WAAW,KAAKT,GAAG,EAAE;MACtCS,WAAW,CAACC,MAAM,CAACD,WAAW,CAACE,OAAO,CAACJ,IAAI,CAAC,EAAE,CAAC,CAAC;MAChD,IAAIA,IAAI,CAACK,IAAI,EAAE;QACbL,IAAI,CAACK,IAAI,CAACC,IAAI,GAAGN,IAAI,CAACM,IAAI;MAC5B;MACA,IAAIN,IAAI,CAACM,IAAI,EAAE;QACbN,IAAI,CAACM,IAAI,CAACD,IAAI,GAAGL,IAAI,CAACK,IAAI;MAC5B;IACF;IAEA,IAAIX,MAAM,EAAE;MACVM,IAAI,CAACK,IAAI,GAAGZ,GAAG,CAACK,CAAC,GAAG,CAAC,CAAC,IAAI,IAAI;MAC9BE,IAAI,CAACM,IAAI,GAAGb,GAAG,CAACK,CAAC,GAAG,CAAC,CAAC,IAAI,IAAI;IAChC,CAAC,MAAM;MACLE,IAAI,CAACK,IAAI,GAAGL,IAAI,CAACM,IAAI,GAAG,IAAI;IAC9B;IAEA,IAAIZ,MAAM,IAAIA,MAAM,CAACN,IAAI,KAAK,MAAM,EAAE;MACpCY,IAAI,CAACb,IAAI,GAAGO,MAAM;MAClBM,IAAI,CAACN,MAAM,GAAG,IAAI;IACpB,CAAC,MAAM;MACLM,IAAI,CAACb,IAAI,GAAG,IAAI;MAChBa,IAAI,CAACN,MAAM,GAAGA,MAAM;IACtB;EACF;EAEA,OAAOA,MAAM;AACf,CAAC;;AAED"},"metadata":{},"sourceType":"script","externalDependencies":[]}